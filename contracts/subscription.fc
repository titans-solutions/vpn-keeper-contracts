#include "imports/stdlib.fc";

const op::activate = "op::activate"c;

;; storage variables
global slice master_address;
global int price_per_day;
global int paid_until;

() load_data() impure inline {
  var ds = get_data().begin_parse();
  master_address = ds~load_msg_addr();
  price_per_day = ds~load_uint(64);
  paid_until = ds~load_uint(32);
  ds.end_parse();
}


() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(master_address)
            .store_uint(price_per_day, 64)
            .store_uint(paid_until, 32)
            .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  load_data();

  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

  if (op == op::activate) {

    int rem = msg_value % price_per_day;

    if (rem != 0) { ;; if the message value is not a multiple of price_per_day, throw an exception
      throw(0xffff);
    }

    int days = msg_value / price_per_day;

    ;; mutate the storage variables
    int from_time = now();
    if (from_time < paid_until) {
      from_time = paid_until;
    }
    paid_until = from_time + days * 86400; ;; 86400 seconds in a day
    save_data();

    ;; send paid amount to the master address
    var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(master_address)
            .store_grams(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();

    send_raw_message(msg, 64); ;; send `msg_value - fee` to the master address, i.e. the contract covers the consts

    return ();
  } else {
    throw(0xffff);
  }
}


int get_price_per_day() method_id {
  load_data();
  return price_per_day;
}

int get_paid_until() method_id {
  load_data();
  return paid_until;
}
